## <summary>Linux hardware error daemon.</summary>

########################################
## <summary>
##	Execute a domain transition to run mcelog.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`mcelog_domtrans',`
	gen_require(`
		type mcelog_t, mcelog_exec_t;
	')

	corecmd_search_bin($1)
	domtrans_pattern($1, mcelog_exec_t, mcelog_t)
')

########################################
## <summary>
##	All of the rules required to
##	administrate an mcelog environment.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	Role allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`mcelog_admin',`
	gen_require(`
		type mcelog_t, mcelog_initrc_exec_t, mcelog_log_t;
		type mcelog_var_run_t, mcelog_etc_t;
		type mcelog_inject_t;
	')

	allow $1 mcelog_t:process { ptrace signal_perms };
	ps_process_pattern($1, mcelog_t)

	init_labeled_script_domtrans($1, mcelog_initrc_exec_t)
	domain_system_change_exemption($1)
	role_transition $2 mcelog_initrc_exec_t system_r;
	allow $2 system_r;

	role $2 types { mcelog_t mcelog_inject_t };

	tunable_policy(`mcelog_client',`
		gen_require(`
			type mcelog_exec_t;
		')

		domtrans_pattern($1, mcelog_exec_t, mcelog_t)
		domain_use_interactive_fds(mcelog_t)
		userdom_use_user_ptys(mcelog_t)
	')

	tunable_policy(`mcelog_tests',`
		gen_require(`
			type mcelog_inject_exec_t;
		')

		domtrans_pattern($1, mcelog_inject_exec_t, mcelog_inject_t)
	')

	files_search_etc($1)
	admin_pattern($1, mcelog_etc_t)

	logging_search_logs($1)
	admin_pattern($1, mcelog_log_t)

	files_search_pids($1)
	admin_pattern($1, mcelog_var_run_t)
')
