--- a/WebappConfig/config.py
+++ b/WebappConfig/config.py
@@ -296,6 +296,7 @@ class Config:
             'wa_installs'       : '${my_persistdir}/${wa_installsbase}',
             'wa_postinstallinfo':
             '${my_appdir}/post-install-instructions.txt',
+            'g_selinux'         : 'no',
             }
 
         # Setup basic defaults
@@ -562,6 +563,14 @@ class Config:
                               'rt all values of DEFAULT_DIRS and will report a'
                               'n error')
 
+        inst_opts.add_argument('--selinux-module',
+                               choices = ['yes',
+                                          'no'],
+                               help = 'If activated, webapp-config will use a S'
+                               'ELinux module to set the file context of server'
+                               ' owned files to \'httpd_sys_rw_content_t\'. Def'
+                               'ault is' + self.config.get('USER', 'g_selinux'))
+
 
         #-----------------------------------------------------------------
         # Information Options
@@ -906,7 +915,9 @@ class Config:
                             'default_dirs' : 'vhost_config_default_dirs',
                             'pretend'      : 'g_pretend',
                             'verbose'      : 'g_verbose',
-                            'bug_report'   : 'g_bugreport'}
+                            'bug_report'   : 'g_bugreport',
+                            'selinux'      : 'g_selinux',
+                           }
 
         for key in option_to_config:
             if key in options and options[key]:
@@ -1613,7 +1624,9 @@ class Config:
                  'orig'     : self.maybe_get('g_orig_installdir'),
                  'upgrade'  : self.upgrading(),
                  'verbose'  : self.verbose(),
-                 'pretend'  : self.pretend()}
+                 'pretend'  : self.pretend(),
+                 'selinux'  : self.maybe_get('g_selinux') == 'yes',
+                }
 
         return allowed_servers[server](directories,
                                        self.create_permissions(),
--- /dev/null
+++ b/WebappConfig/selinux.py
@@ -0,0 +1,92 @@
+#!/usr/bin/python -O
+#
+# /usr/sbin/webapp-config
+#       Python script for managing the deployment of web-based
+#       applications
+#
+#       Originally written for the Gentoo Linux distribution
+#
+# Copyright (c) 1999-2007 Authors
+#       Released under v2 of the GNU GPL
+#
+# ========================================================================
+
+# ========================================================================
+# Dependencies
+# ------------------------------------------------------------------------
+
+import os, os.path, re, shutil, subprocess, tempfile
+
+from WebappConfig.debug     import OUT
+
+# ========================================================================
+# Constants
+# ------------------------------------------------------------------------
+
+MAKE_CONF_FILE = ['/etc/make.conf', '/etc/portage/make.conf']
+
+# ========================================================================
+# SELinux handler
+# ------------------------------------------------------------------------
+
+class SELinux:
+
+    def __init__(self, package_name, vhost_hostname, policy_types = ()):
+        self.package_name = package_name
+        self.vhost_hostname = vhost_hostname
+        self.policy_name = '{}_{}'.format(package_name, vhost_hostname)
+        self.policy_types = policy_types
+        if not self.policy_types:
+            for filename in MAKE_CONF_FILE:
+                try:
+                    with open(filename) as file:
+                        for line in file.readlines():
+                            if line.startswith('POLICY_TYPES='):
+                                self.policy_types = line[len('POLICY_TYPES='):-1].strip(' "').split()
+                                break
+                        if self.policy_types is not None:
+                            break
+                except IOError:
+                    pass
+            if not self.policy_types:
+                 OUT.die('No SELinux policy was found, abording')
+
+    def remove_module(self):
+        OUT.info('Removing SELinux modules')
+        for policy in self.policy_types:
+            if subprocess.call(['semodule', '-s', policy, '-r', self.policy_name]):
+                OUT.warn('Unable to remove {} SELinux module for {} @ {}'.format(policy, self.package_name, self.vhost_hostname))
+
+    def create_module(self, package_version, vhost_root, server_files, server_dirs):
+        temp_dir = tempfile.mkdtemp()
+        OUT.info('Creating SELinux modules')
+        cleaned_version = re.match(r'(?P<version>[0-9]*\.[0-9]*(?:\.[0-9]*)?)', package_version).group('version')
+        for policy in self.policy_types:
+            base_dir = os.path.join(temp_dir, policy)
+            os.mkdir(base_dir)
+            with open(os.path.join(base_dir, '{}.te'.format(self.policy_name)), 'w') as te_file:
+                te_file.write('policy_module({},{})\n'.format(self.policy_name, cleaned_version))
+                te_file.write('require {\n')
+                te_file.write('  type httpd_sys_rw_content_t;\n')
+                te_file.write('}')
+            with open(os.path.join(base_dir, '{}.fc'.format(self.policy_name)), 'w') as fc_file:
+                for files in server_files:
+                    fc_file.write('{} gen_context(system_u:object_r:httpd_sys_rw_content_t,s0)\n'.format(SELinux.filename_re_escape(os.path.join(vhost_root, files.rstrip('\n')))))
+                for dirs in server_dirs:
+                    fc_file.write('{}(/.*)? gen_context(system_u:object_r:httpd_sys_rw_content_t,s0)\n'.format(SELinux.filename_re_escape(os.path.join(vhost_root, dirs.rstrip('\n')))))
+            if subprocess.call(['make', '-s', '-C', base_dir, '-f', os.path.join('/usr/share/selinux', policy, 'include/Makefile'), '{}.pp'.format(self.policy_name)]):
+                if not os.path.isfile(os.path.join('/usr/share/selinux', policy, 'include/Makefile')):
+                    OUT.die('Policy {} is not supported, please fix your configuration'.format(policy))
+                OUT.die('Unable to create {} SELinux module for {} @ {}'.format(policy, self.package_name, self.vhost_hostname))
+        OUT.info('Installing SELinux modules')
+        try:
+            for policy in self.policy_types:
+                if subprocess.call(['semodule', '-s', policy, '-i', os.path.join(temp_dir, policy, '{}.pp'.format(self.policy_name))]):
+                    OUT.die('Unable to install {} SELinux module for {} @ {}'.format(policy, self.package_name, self.vhost_hostname))
+        except IOError:
+            OUT.die('"semodule" was not found, please check you SELinux installation')
+        shutil.rmtree(temp_dir)
+
+    @staticmethod
+    def filename_re_escape(string):
+        return re.sub('\.', '\.', string)
--- a/WebappConfig/server.py
+++ b/WebappConfig/server.py
@@ -25,6 +25,7 @@ from WebappConfig.debug        import OUT
 from WebappConfig.eprefix      import EPREFIX
 from WebappConfig.worker       import WebappRemove, WebappAdd
 from WebappConfig.permissions  import get_group, get_user
+from WebappConfig.selinux      import SELinux
 
 from WebappConfig.wrapper      import package_installed
 
@@ -96,6 +97,11 @@ class Basic:
         self.__v         = flags['verbose']
         self.__p         = flags['pretend']
 
+        if flags['selinux']:
+            self.__selinux = SELinux(self.__ws.pn, flags['host'])
+        else:
+            self.__selinux = None
+
         wd = WebappRemove(self.__content,
                           self.__v,
                           self.__p)
@@ -177,6 +183,11 @@ class Basic:
 
         self.__db.remove(self.__destd)
 
+        # Remove the selinux module
+
+        if self.__selinux is not None:
+            self.__selinux.remove_module()
+
         # did we leave anything behind?
 
         if self.file_behind_flag:
@@ -189,6 +200,13 @@ class Basic:
 
         OUT.debug('Basic server install', 7)
 
+        # Create the selinux module
+
+        if self.__selinux is not None:
+            self.__selinux.create_module(self.__ws.pvr, self.__vhostroot,
+                                         self.__ws.server_files,
+                                         self.__ws.server_dirs)
+
         # The root of the virtual install location needs to exist
 
         if not os.path.isdir(self.__destd) and not self.__p:
@@ -297,6 +315,11 @@ class Basic:
 
         self.__content.write()
 
+        # Warn the user about needed relabelling
+
+        OUT.warn('You probably need to relabel the new installation, using for'
+                 'example "restorecon -R ' + self.__destd + '"')
+
         # and we're done
 
         OUT.info('Install completed - success', 1)
